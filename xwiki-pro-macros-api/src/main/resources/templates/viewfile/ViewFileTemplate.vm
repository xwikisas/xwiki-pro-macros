## ---------------------------------------------------------------------------
## See the NOTICE file distributed with this work for additional
## information regarding copyright ownership.
##
## This is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as
## published by the Free Software Foundation; either version 2.1 of
## the License, or (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
## Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public
## License along with this software; if not, write to the Free
## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
## 02110-1301 USA, or see the FSF site: http://www.fsf.org.
## ---------------------------------------------------------------------------
##!source.syntax=xwiki/2.1
{{velocity output='false'}}
#template('attachment_macros.vm')

#set ($officeExtensions = [ 'ppt', 'pptx', 'odp', 'doc', 'docx', 'odt', 'xls', 'xlsx', 'ods' ])
#set ($presentationExtensions = [ 'ppt', 'pptx', 'odp' ])
#set ($hasPDFViewer = $xwiki.exists('XWiki.PDFViewerMacro'))

#macro (renderThumbnailButton $attachmentRef $previewSupported $width $height $forceCard $inEditMode)
  #set ($style = '')
  #if ("$!width" != '')
    #set ($style = $style + " width: $width;")
  #end
  #if ("$!height" != '')
    #set ($style = $style + " height: $height;")
  #end
  #if ("$!style" != '')
    #set ($style = "style='$style.trim()'")
    #set ($thumbnailStyle = 'Card')
  #elseif ($forceCard)
    #if ($inEditMode)
      #set ($style = "style='width: min-content; min-height: min-content;'")
    #end
    #set ($thumbnailStyle = 'Card')
  #else
    #set ($thumbnailStyle = 'Button')
  #end
  #if ($isInline || $thumbnailStyle == 'Button')
    #set ($elem = 'span')
    #set ($clean = false)
  #else
    #set ($elem = 'div')
    #set ($clean = true)
  #end
  #set ($attachment = $xwiki.getDocument($attachmentRef.getParent()).getAttachment($attachmentRef.getName()))
  #set ($thumbnail = "#displayAttachmentMimeType($attachment)")
  #if ($thumbnail.charAt(0) == '#')
    ## #displayAttachmentMimeType is not supported (before July 2022)
    #set ($thumbnail =
      '<div class="attachmentMimeType"><span><span class="fa fa-paperclip" aria-hidden="true"></span></span></div>')
  #end
  #if ($elem == "span")
    #set ($thumbnail = $thumbnail.replace('</div>', '</span>').replace('<div ', '<span '))
  #end
  {{html clean="$clean"}}
  <$elem class="viewFileThumbnail viewFileThumbnail$thumbnailStyle" $style data-preview="$previewSupported"
    data-ref="$escapetool.xml($services.model.serialize($attachmentRef, 'default'))">
    <a href="$escapetool.xml($xwiki.getURL($attachmentRef))"
       download="download"
       #if ($thumbnailStyle == "Button") class="button button-primary" #end
       title="$escapetool.xml($services.localization.render('rendering.macro.viewFile.thumbnail.button.title'))">
      $thumbnail
      <span class="viewFileName">$escapetool.xml($attachmentRef.getName())</span>
    </a>
  </$elem>
  {{/html}}
#end

#macro (renderFull $extension $attachmentRef $width $height)
  #set ($escapedAttachmentReference = $services.rendering.escape($attachmentRef, $xwiki.currentContentSyntaxId))
  #if ($officeExtensions.contains($extension))

    {{html clean=false}}
    <div class="viewFileFull#if (!$presentationExtensions.contains($extension)) box#end"
      style="width: $width; height: $height; overflow: auto">
    {{/html}}

    {{office reference="$escapedAttachmentReference" /}}

    {{html clean=false}}
    </div>
    {{/html}}

  #elseif ($extension == 'pdf' && $hasPDFViewer)
    #if ($height.endsWith('px'))
      #set ($height = $stringtool.removeEnd($height, 'px'))
    #end
    #if ($width.endsWith('px'))
      #set ($width = $stringtool.removeEnd($width, 'px'))
    #end

    {{pdfviewer file="$escapedAttachmentReference" height="$height" width="$width"/}}

  #else
    #renderThumbnailButton($attachmentRef false $width $height)
  #end
#end

#macro (executeMacro)
  #set($unescapedFilename = $params.getName())
  #if(!$unescapedFilename)
    #set($unescapedFilename = $params.getAttFilename())
  #end
  #set ($discard = $xwiki.jsx.use('Confluence.Macros.ViewFile'))
  #if(!$unescapedFilename)

    {{error}}
       $escapetool.xml($services.localization.render('rendering.macro.viewFile.attachmentrequired'))
    {{/error}}
  #else
    #continueExecutingMacro##
  #end
#end

#macro (continueExecutingMacro)
  #set ($attachmentRef = $services.model.resolveAttachment($unescapedFilename))
  #set ($discard = $xwiki.ssx.use('Confluence.Macros.ViewFile'))
  #set ($extension = $attachmentRef.getName().substring($attachmentRef.getName().lastIndexOf('.') + 1).toLowerCase())
  #set ($width = $params.getWidth())
  #set ($height = $params.getHeight())
  #set ($display = $params.getDisplay().name())
  #if ("$!width" != '')
    #set ($width = $escapetool.xml($width))
    #if (!$width.endsWith('%') && !$width.endsWith('px'))
      #set($width = $width + 'px')
    #end
  #end
  #if ("$!height" != '')
    #set ($height = $escapetool.xml($height))
    #if (!$height.endsWith('%') && !$height.endsWith('px'))
      #set($height = $height + 'px')
    #end
  #end
  #set ($inEditMode = $xcontext.action == 'edit' || $targetSyntaxId == 'annotatedhtml' ||
    $targetSyntaxId == 'annotatedxhtml' || $request.outputSyntax == 'annotatedhtml')
  #if (($display == 'FULL' || $display == 'full') && ($isInline || $inEditMode))
    #set ($display = 'thumbnail')
  #end
  #if ($display == 'FULL' || $display == 'full')
    #if ("$!width" == '')
      #set ($width = '100%')
    #end
    #if ("$!height" == '')
      #set ($height = '1000px')
    #end
    #renderFull($extension $attachmentRef $width $height)
  #else
    ## thumbnail or fallback
    #set ($hasPreview = ($extension == 'pdf' && $hasPDFViewer) || $officeExtensions.contains($extension))
    #set ($forceCard = ($display == 'THUMBNAIL' || $display == 'thumbnail' || ("$!display" == '' && !$isInline)))
    #if ($presentationExtensions.contains($extension))
      #set ($discard = $xwiki.jsfx.use('uicomponents/widgets/gallery/gallery.js', {'forceSkinAction': true}))
      #set ($discard = $xwiki.ssfx.use('uicomponents/widgets/gallery/gallery.css'))
    #end
    #renderThumbnailButton($attachmentRef $hasPreview $width $height $forceCard $inEditMode)
  #end
#end
{{/velocity}}

{{velocity}}
## We need to check if there is a valid license because the macro is registered even if the user doesn't have view right
## on the macro definition page. See XWIKI-14828: Rendering macros defined in wiki pages are available to users that
## don't have view right on those pages.
#if ($services.promacrolicensing.hasLicensureForEntity($xcontext.macro.doc.documentReference))##
  #executeMacro##
#else
  {{missingLicenseMessage extensionName='proMacros.extension.name'/}}
#end
{{/velocity}}